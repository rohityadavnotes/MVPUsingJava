apply plugin: 'com.android.library'

def keystorePropertiesFileName = rootProject.file("keystore/keystore.properties");
def keystoreProperties = new Properties()
if (keystorePropertiesFileName.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFileName))
}

def androidVersions = rootProject.ext.projectConfiguration
def androidDependencies = rootProject.ext

android {

    compileSdkVersion androidVersions.compileSdk

    defaultConfig {
        minSdkVersion androidVersions.minSdk
        targetSdkVersion androidVersions.targetSdk
        versionCode androidVersions.versionCode
        versionName androidVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(':library-utilities')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.appcompat:appcompat:$androidDependencies.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$androidDependencies.constraintLayout"
    testImplementation "junit:junit:$androidDependencies.jUnit"
    androidTestImplementation "androidx.test.ext:junit:$androidDependencies.testJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidDependencies.espressoCore"

    /* Design Libraries */
    implementation "com.google.android.material:material:$androidDependencies.materialDesign"
    implementation "androidx.activity:activity:$androidDependencies.activity"
    
    /* Other Third Party Libraries */
    implementation "com.intuit.sdp:sdp-android:$androidDependencies.sdp"
}